{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"InfraWallet","text":"<p>Control your cloud costs just in the way how you control your bank accounts</p> <p>InfraWallet is a powerful Backstage plugin designed to help organizations gain full visibility and control over their cloud costs. By aggregating, categorizing, and analyzing costs across multiple cloud providers, InfraWallet empowers teams to make informed financial decisions and optimize their cloud spending.</p> <p>With its seamless integration into Backstage, InfraWallet provides a unified interface for managing cloud costs, enabling teams to collaborate effectively. Whether you're tracking costs for AWS, Azure, Google Cloud, or other providers, InfraWallet simplifies cost management with its intuitive features and flexible configuration options.</p> <p></p>"},{"location":"#how-it-works","title":"How it Works","text":"<pre><code>flowchart LR\n    classDef userStyle fill:#f3f8ff,stroke:#1e88e5,stroke-width:2px,color:#1e88e5;\n    classDef backstageStyle fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#1976d2;\n    classDef backendStyle fill:#fffde7,stroke:#fbc02d,stroke-width:2px,color:#fbc02d;\n    classDef frontendStyle fill:#e8f5e9,stroke:#43a047,stroke-width:2px,color:#43a047;\n    classDef providerStyle fill:#f3e5f5,stroke:#8e24aa,stroke-width:2px,color:#8e24aa;\n\n    User[User]\n    class user userStyle\n\n    subgraph Backstage\n      Frontend[InfraWallet&lt;br/&gt;Frontend]\n      Backend[InfraWallet&lt;br/&gt;Backend]\n      class Frontend frontendStyle\n      class Backend backendStyle\n    end\n    class Backstage backstageStyle\n\n    subgraph Cloud Providers\n      AWS[AWS]\n      Azure[Azure]\n      GCP[Google&lt;br/&gt;Cloud]\n      Others[Others]\n      class AWS,Azure,GCP,Others providerStyle\n    end\n\n    User --&gt;|Visualization| Frontend\n    Frontend --&gt; Backend\n\n    Backend --&gt;|Cost Data| AWS\n    Backend --&gt;|Cost Data| Azure\n    Backend --&gt;|Cost Data| GCP\n    Backend --&gt;|Cost Data| Others</code></pre>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Multi-Cloud Cost Aggregation: Aggregate cloud costs across multiple platforms and accounts with ease.</li> <li>Cost Categorization: Group and analyze costs across different cloud providers using configurable category mappings.</li> <li>Fast and Responsive: Leverage cached cost data for swift response times and rapid access to financial insights.</li> <li>Production-Ready: Easy to configure and deploy as a Backstage plugin, with both frontend and backend components ready for production use.</li> </ul>"},{"location":"contributing/","title":"Developer Guide","text":""},{"location":"contributing/#local-development","title":"Local Development","text":"<p>First of all, make sure you are using either Node 18 or Node 20 for this project. Your plugin has been added to the example app in this repository, meaning you'll be able to access it by running <code>yarn install &amp;&amp; yarn dev</code> in the root directory, and then navigating to <code>http://localhost:3000/infrawallet</code>.</p> <p>You can also serve the plugin in isolation by running <code>yarn start</code> in the plugin directory. This method of serving the plugin provides quicker iteration speed and a faster startup and hot reloads. It is only meant for local development, and the setup for it can be found inside a plugin's <code>dev</code> directory (e.g., <code>plugins/infrawallet/dev</code>).</p> <p>In case you would like to contribute to the frontend part of InfraWallet, you can use the MockClient for cost data generation and there is no need to have real cloud integrations. To do this you can add the following configuration to your <code>app-config.local.yaml</code> file:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      mock:\n        - name: demo-mock-data\n</code></pre>"},{"location":"contributing/#pre-commit-hook","title":"Pre-commit Hook","text":"<p>We use Husky to set up a pre-commit hook that runs the linter, type checker and code formatter before committing. Run <code>git config core.hooksPath .husky</code> from the root folder of this repo to enable it.</p>"},{"location":"contributing/#how-to-support-a-new-provider","title":"How to Support a New Provider?","text":"<p>In InfraWallet, all the cost data fetched from different providers are transformed into a generic format:</p> TypeScript<pre><code>export type Report = {\n  // the unique ID of a provider account, defined in app-config.yaml\n  id: string;\n  // other dimensions such as category, service, a tag, etc.\n  [dimension: string]: string | { [period: string]: number } | undefined;\n  // cost reports in the following format [\"period\": cost]\n  // e.g., [\"2024-01\": 12.23, \"2024-02\": 23.21] (monthly)\n  //       [\"2024-01-10\": 9.23, \"2024-01-11\": 10.21] (daily)\n  reports?: {\n    [period: string]: number;\n  };\n};\n</code></pre> <p>For example, here is a report returned from InfraWallet backend:</p> JSON<pre><code>{\n  \"id\": \"my-aws-dev-account\",\n  \"provider\": \"aws\",\n  \"category\": \"Infrastructure\",\n  \"service\": \"EC2\",\n  \"reports\": {\n    \"2024-01\": 12.23,\n    \"2024-02\": 23.21\n  }\n}\n</code></pre> <p>The aggregation is done by the frontend after getting all the needed cost reports. This means that as long as the backend returns more cost reports in the same format, InfraWallet can always aggregate and visualize the costs.</p> <p>When adding a new provider, you need to implement a client based on the abstract class InfraWalletClient. Check AwsClient.ts and AzureClient.ts as examples.</p>"},{"location":"getting-started/budgets/","title":"Budgets","text":"<p>You can track your annual spending from the Budgets page. To set a budget for a provider, click the <code>Manage Budget</code> button, then enter the desired annual budget. This will allow you to monitor spending against your set budget and adjust as needed throughout the year.</p> <p>You can easily toggle between annual and monthly views to see spending trends and budget usage.</p> <p></p>"},{"location":"getting-started/business-metrics/","title":"Business Metrics","text":""},{"location":"getting-started/business-metrics/#display-business-metrics-together-with-costs-data","title":"Display Business Metrics Together With Costs Data","text":"<p>To better understand the trend of your cloud costs, it can be very helpful to check business metrics at the same time. For example, an increase of some cloud costs may be caused by the larger number of active users, which justify the cost increase.</p> <p>As a beta feature, InfraWallet supports fetching metrics from different providers (Datadog and GrafanaCloud are supported for now) and then show such metrics as line charts on the same cost graph. Here is an example of how it looks:</p> <p></p>"},{"location":"getting-started/business-metrics/#configure-metric-providers","title":"Configure Metric Providers","text":""},{"location":"getting-started/business-metrics/#datadog","title":"Datadog","text":"<p>InfraWallet uses Datadog's Query timeseries points API to fetch metric points. Before jumping into the <code>app-config.yaml</code>, you need to create an API key and an application key for InfraWallet, see the official documentations here. If the application key is scoped, it needs to have the <code>timeseries_query</code> scope.</p> <p>The configuration for a Datadog metric provider looks like the following:</p> YAML<pre><code>backend:\n  infraWallet:\n    metricProviders:\n      datadog:\n        # it is possible to have multiple datadog metric providers\n        - name: &lt;unique_name_of_this_provider&gt;\n          apiKey: &lt;the_created_api_key&gt;\n          applicationKey: &lt;the_created_app_key&gt;\n          ddSite: https://api.datadoghq.eu # see alternatives in https://docs.datadoghq.com/getting_started/site/#access-the-datadog-site\n</code></pre>"},{"location":"getting-started/business-metrics/#grafanacloud","title":"GrafanaCloud","text":"<p>InfraWallet uses GrafanaCloud's Query a data source API to fetch metric points. In order to connect your GrafanaCloud organization, you need to create a service account and a token. The documentation can be found here. After creating the service account token, add the following part into the configuration:</p> YAML<pre><code>backend:\n  infraWallet:\n    metricProviders:\n      grafanacloud:\n        # it is possible to have multiple GrafanaCloud metric providers\n        - name: &lt;unique_name_of_this_provider&gt;\n          url: &lt;link_to_the_site&gt; # e.g., https://foo.grafana.net\n          datasourceUid: &lt;uid_of_the_target_datasource&gt;\n          token: &lt;service_account_token&gt;\n</code></pre>"},{"location":"getting-started/business-metrics/#configure-metrics","title":"Configure Metrics","text":"<p>Visit <code>/infrawallet/default/settings</code> page to configure metrics.</p> <p></p>"},{"location":"getting-started/business-metrics/#notes","title":"Notes","text":"<p>For Datadog, because InfraWallet only has daily or monthly granularities for costs, it is recommended to add a rollup function to each query. Regarding the aggregation interval, <code>IW_INTERVAL</code> can be used as a placeholder and later on, InfraWallet replaces it with the actual value (<code>86400</code> or <code>2592000</code>) based on the granularity. For example:</p> Text Only<pre><code>avg:system.cpu.idle{*}.rollup(avg, IW_INTERVAL)\n</code></pre> <p>Similar to Datadog, it is recommended to apply an aggregation_over_time() for each query in Grafana Cloud. For instance:</p> Text Only<pre><code>max(max_over_time(active_user[IW_INTERVAL]))\n</code></pre>"},{"location":"getting-started/custom-costs/","title":"Custom Costs","text":"<p>If there is no integration available for some cloud costs, you can add them manually using the Custom Costs UI in InfraWallet. The table on this page displays all saved custom costs within InfraWallet's database.</p> <p>Currently, custom costs are only available at the monthly level. When viewing costs with <code>daily</code> granularity, monthly custom costs can be transformed into daily costs using the following amortization modes:</p> <ul> <li>Average (default): The monthly cost is divided evenly across all days in the month.</li> <li>First day: The full monthly cost is assigned to the first day of the month.</li> <li>End day: The full monthly cost is assigned to the last day of the month.</li> </ul> <p>To add multiple custom cost records for a single provider, use the <code>Bulk Add</code> button. Enter details such as provider, monthly cost, start month, and end month, then check the preview and save the records.</p>"},{"location":"getting-started/customization/","title":"Customization","text":""},{"location":"getting-started/customization/#default-settings-for-frontend","title":"Default Settings for Frontend","text":"<p>Site admins can configure the default view for InfraWallet, including the default group by dimension, and the default query period. Add the following configurations to your <code>app-config.yaml</code> file if the default view needs to be changed.</p> YAML<pre><code># note that infraWallet exists at the root level, it is not the same one for backend configurations\ninfraWallet:\n  settings:\n    defaultGroupBy: none # none by default, or account, provider, category, service, tag:&lt;tag_key&gt;\n    defaultShowLastXMonths: 3 # 3 by default, or other numbers, we recommend it less than 12\n</code></pre>"},{"location":"getting-started/customization/#custom-title-and-subtitle","title":"Custom Title and Subtitle","text":"<p>By default, the <code>InfraWalletPage</code> component is configured in the <code>packages/app/src/App.tsx</code> file as follows:</p> TypeScript<pre><code>&lt;Route path=\"/infrawallet\" element={&lt;InfraWalletPage /&gt;} /&gt;\n</code></pre> <p>To customize the title and subtitle of the InfraWalletPage, you can modify the route in the same file as shown below:</p> TypeScript<pre><code>&lt;Route path=\"/infrawallet\" element={&lt;InfraWalletPage title=\"Custom title\" subTitle=\"Custom subTitle\" /&gt;} /&gt;\n</code></pre>"},{"location":"getting-started/customization/#configuring-tab-visibility","title":"Configuring Tab Visibility","text":"<p>InfraWallet includes tabs for Budgets, Custom Costs, and Business Metrics. You can easily control the visibility of each tab by enabling or disabling them in your <code>app-config.yaml</code>.</p> YAML<pre><code>infraWallet:\n  settings:\n    budgets:\n      enabled: true\n\n    businessMetrics:\n      enabled: true\n\n    customCosts:\n      enabled: false # hide Custom Costs tab\n</code></pre>"},{"location":"getting-started/extensions/","title":"Extensions","text":"<p>The plugin offers extension points that allow parts of the report generation to be customised.</p>"},{"location":"getting-started/extensions/#infrawalletreportfilterextensionpoint","title":"InfrawalletReportFilterExtensionPoint","text":"<p>This extension point allows to augment or append to the provided filters through custom information.</p> <p>For this the following interface can be used</p> TypeScript<pre><code>export interface InfrawalletFilterExtension {\n  augmentFilters(parameters: ReportParameters): Promise&lt;ReportParameters&gt;;\n}\n</code></pre> <p>The type <code>ReportParameters</code></p> TypeScript<pre><code>export type ReportParameters = {\n  filters: string;\n  tags: Tag[];\n  groups: string;\n  granularityString: string;\n  startTime: string;\n  endTime: string;\n  entityNamespace?: string;\n  entityName?: string;\n};\n</code></pre> <p>The <code>filters</code> string has the following format:</p> TypeScript<pre><code>(key1:value,key2:value,...,keyN:value)\n</code></pre> <p>where value is either a single value or an array with the following structure <code>(value1|value2|...|valueN)</code>.</p> <p>The following keys are defined through the annotations of the <code>EntityInfraWalletCard</code> listed in the documentation. Other keys can be passed through if your targeted integration supports it.</p> <p>Below an example implementation of the extension point.</p> TypeScript<pre><code>import { AuthService, coreServices, createBackendModule, LoggerService } from '@backstage/backend-plugin-api';\nimport { CatalogService, catalogServiceRef } from '@backstage/plugin-catalog-node';\nimport {\n  InfrawalletFilterExtension,\n  infrawalletReportFilterExtensionPoint,\n  ReportParameters,\n  Tag,\n} from '@electrolux-oss/plugin-infrawallet-backend';\n\nclass InfraWalletFilter implements InfrawalletFilterExtension {\n  private readonly myProvider = 'theProvider';\n\n  constructor(\n    private readonly auth: AuthService,\n    private readonly catalogApi: CatalogService,\n    private readonly logger: LoggerService,\n  ) {}\n\n  async augmentFilters(filters: ReportParameters): Promise&lt;ReportParameters&gt; {\n    if (filters.entityName === undefined || filters.entityNamespace === undefined) {\n      return filters;\n    }\n\n    const entity = await this.catalogApi.getEntityByRef(`${filters.entityNamespace}/${filters.entityName}`, {\n      credentials: await this.auth.getOwnServiceCredentials(),\n    });\n    if (entity) {\n      const entityTags: Tag[] = [];\n\n      if (entity.metadata.labels) {\n        this.logger.info(`Adding tags from entity ${filters.entityName} in namespace ${filters.entityNamespace}`);\n        for (const [key, value] of Object.entries(entity.metadata.labels)) {\n          entityTags.push({ key, value, provider: this.myProvider });\n        }\n      }\n      filters.tags.push(...entityTags);\n    }\n    return filters;\n  }\n}\n\nexport const infrawalletModuleFilterextension = createBackendModule({\n  pluginId: 'infrawallet',\n  moduleId: 'filterextension',\n  register(reg) {\n    reg.registerInit({\n      deps: {\n        auth: coreServices.auth,\n        catalogApi: catalogServiceRef,\n        infraWalletExtension: infrawalletReportFilterExtensionPoint,\n        logger: coreServices.logger,\n      },\n      async init({ auth, catalogApi, infraWalletExtension, logger }) {\n        infraWalletExtension.addReportFilter(new InfraWalletFilter(auth, catalogApi, logger));\n      },\n    });\n  },\n});\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#frontend","title":"Frontend","text":"<p>Install the frontend package in your Backstage app:</p> Bash<pre><code>yarn --cwd packages/app add @electrolux-oss/plugin-infrawallet\n</code></pre> <p>Modify <code>packages/app/src/App.tsx</code> to include InfraWallet in your routes:</p> TypeScript<pre><code>// ...\nimport { InfraWalletPage } from '@electrolux-oss/plugin-infrawallet';\n// ...\n&lt;FlatRoutes&gt;\n    // ...\n    &lt;Route path=\"/infrawallet\" element={&lt;InfraWalletPage /&gt;} /&gt;\n&lt;/FlatRoutes&gt;\n</code></pre>"},{"location":"getting-started/installation/#backend","title":"Backend","text":"<p>Install the backend package in your Backstage app:</p> Bash<pre><code>yarn --cwd packages/backend add @electrolux-oss/plugin-infrawallet-backend\n</code></pre> <p>Add backend plugin to <code>packages/backend/src/index.ts</code>:</p> TypeScript<pre><code>const backend = createBackend();\n// ...\n// InfraWallet backend\nbackend.add(import('@electrolux-oss/plugin-infrawallet-backend'));\n// ...\nbackend.start();\n</code></pre>"},{"location":"getting-started/installation/#add-integrations","title":"Add integrations","text":"<p>Here is an example of the <code>app-config.yaml</code> configuration for AWS and Azure:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      azure:\n        - name: &lt;unique_name_of_this_integration&gt;\n          subscriptionId: ...\n          tenantId: ...\n          clientId: ...\n          clientSecret: ...\n        - name: &lt;unique_name_of_this_integration&gt;\n          subscriptionId: ...\n          tenantId: ...\n          clientId: ...\n          clientSecret: ...\n      aws:\n        - name: &lt;unique_name_of_this_integration&gt;\n          accountId: '&lt;12-digit_account_ID_as_string&gt;'\n          assumedRoleName: ...\n          accessKeyId: ...\n          secretAccessKey: ...\n        - name: &lt;unique_name_of_this_integration&gt;\n          accountId: '&lt;12-digit_account_ID_as_string&gt;'\n          assumedRoleName: ...\n          accessKeyId: ...\n          secretAccessKey: ...\n</code></pre>"},{"location":"getting-started/installation/#add-to-the-sidebar-optional","title":"Add to the sidebar (optional)","text":"<p>Modify <code>packages/app/src/components/Root/Root.tsx</code> to include InfraWallet in the sidebar menu:</p> TypeScript<pre><code>import { InfraWalletIcon } from '@electrolux-oss/plugin-infrawallet';\n// ...\n    &lt;Sidebar&gt;\n      // ...\n      &lt;SidebarGroup label=\"Menu\" icon={&lt;MenuIcon /&gt;}&gt;\n        &lt;SidebarItem\n          icon={InfraWalletIcon}\n          to=\"infrawallet\"\n          text=\"InfraWallet\"\n        /&gt;\n      &lt;/SidebarGroup&gt;\n      // ...\n    &lt;/Sidebar&gt;\n</code></pre>"},{"location":"getting-started/installation/#integrate-with-backstage-catalog-optional","title":"Integrate with Backstage catalog (optional)","text":"<p>Modify <code>packages/app/src/components/catalog/EntityPage.tsx</code> to include the InfraWallet card in the entity page:</p> TypeScript<pre><code>import {EntityInfraWalletCard, isInfraWalletAvailable } from '@electrolux-oss/plugin-infrawallet';\n// ...\n\n    &lt;EntitySwitch&gt;\n      &lt;EntitySwitch.Case if={isInfraWalletAvailable}&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;EntityInfraWalletCard /&gt;\n        &lt;/Grid&gt;\n      &lt;/EntitySwitch.Case&gt;\n    &lt;/EntitySwitch&gt;\n// ...\n</code></pre> <p>The <code>EntityInfraWalletCard</code> will only appear if the entity has at least one of the following annotations:</p> <ul> <li><code>infrawallet.io/project</code></li> <li><code>infrawallet.io/account</code></li> <li><code>infrawallet.io/service</code></li> <li><code>infrawallet.io/category</code></li> <li><code>infrawallet.io/provider</code></li> <li><code>infrawallet.io/extra-filters</code></li> <li><code>infrawallet.io/tags</code> (requires the <code>infrawallet.io/provider</code> annotation)</li> </ul> <p>These annotations are used to filter costs, similar to the <code>Filters</code> component on the InfraWallet main page.</p> <ul> <li><code>infrawallet.io/extra-filters</code>: Accepts a string like <code>\"key-x: value-x, key-y: value-y\"</code>.</li> <li>Other annotations: Accept a single string value.</li> </ul> <p>When multiple annotations are present, the fetched cost data will match all the given filters.</p>"},{"location":"getting-started/integrations/aws/","title":":simple-amazonwebservices: AWS","text":"<p>InfraWallet uses an IAM role to retrieve cost and usage data via the AWS Cost Explorer APIs. Before configuring InfraWallet, you must set up the necessary AWS IAM role and policy.</p>"},{"location":"getting-started/integrations/aws/#for-management-accounts","title":"For Management Accounts","text":"<p>If you have a management account, this setup only needs to be done once within the management account. InfraWallet will then be able to retrieve cost data across all member accounts.</p>"},{"location":"getting-started/integrations/aws/#for-non-management-accounts","title":"For Non-Management Accounts","text":"<p>If you're not using a management account, you'll need to create a role in each AWS account and configure trust relationships individually.</p>"},{"location":"getting-started/integrations/aws/#required-iam-role-permissions","title":"Required IAM Role Permissions","text":"<p>The IAM role must have the following permissions to access cost and usage data:</p> JSON<pre><code>{\n  \"Statement\": [\n    {\n      \"Action\": [\"ce:GetCostAndUsage\", \"ce:GetTags\"],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\",\n      \"Sid\": \"\"\n    }\n  ],\n  \"Version\": \"2012-10-17\"\n}\n</code></pre>"},{"location":"getting-started/integrations/aws/#configuration","title":"Configuration","text":"<p>Once the IAM roles and policies are in place, add the following configuration to your <code>app-config.yaml</code> file:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      aws:\n        - name: &lt;unique_name_of_this_integration&gt;\n          accountId: '&lt;12-digit_account_ID&gt;' # quoted as a string\n          assumedRoleName: &lt;name_of_the_AWS_IAM_role_to_be_assumed&gt; # optional, only needed if you want to assume a role\n          accessKeyId: &lt;access_key_ID_of_AWS_IAM_user_that_assumes_the_role&gt; # optional, only needed when an IAM user is used. if assumedRoleName is also provided, this user is used to assume the role\n          secretAccessKey: &lt;secret_access_key_of_AWS_IAM_user_that_assumes_the_role&gt; # optional, only needed when an IAM user is used. if assumedRoleName is also provided, this user is used to assume the role\n</code></pre> <p>InfraWallet's AWS client is built using the AWS SDK for JavaScript. If both <code>accessKeyId</code> and <code>secretAccessKey</code> are provided in the configuration, the client will use the specified IAM user. If <code>assumedRoleName</code> is set, the client will assume that role (if <code>accessKeyId</code> and <code>secretAccessKey</code> is also provided, that IAM user will assume the role). Otherwise, it follows the default credential provider chain.</p> <p>When your environment already has the AWS auth in-place, the configuration will look like this:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      aws:\n        - name: &lt;unique_name_of_this_integration&gt;\n          accountId: '&lt;12-digit_account_ID&gt;' # quoted as a string\n</code></pre>"},{"location":"getting-started/integrations/azure/","title":"Azure","text":"<p>To manage Azure costs with InfraWallet, you need to register an application in Azure. Note that InfraWallet has been tested with subscription-level cost data only.</p>"},{"location":"getting-started/integrations/azure/#steps","title":"Steps","text":"<ol> <li>After registering the application, navigate to the <code>Subscriptions</code> page and select the target subscription.</li> <li>Go to the <code>Access control (IAM)</code> section and assign the <code>Cost Management Reader</code> role to the newly created application.</li> <li>Generate a client secret for the application.</li> </ol> <p>Add the following configurations to your <code>app-config.yaml</code> file:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      azure:\n        - name: &lt;unique_name_of_this_integration&gt;\n          subscriptionId: &lt;Azure_subscription_ID&gt;\n          tenantId: &lt;Azure_tenant_ID&gt;\n          clientId: &lt;Client_ID_of_the_created_application&gt;\n          clientSecret: &lt;Client_secret_of_the_created_application&gt;\n</code></pre>"},{"location":"getting-started/integrations/confluent-cloud/","title":"Confluent Cloud","text":"<p>To manage Confluent Cloud costs, you need to create an API key (Service account) for your Organization with the 'Cloud resource management' resource scope, you can find the documentation here. Once you have your API key details, add the following settings to <code>app-config.yaml</code>:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      confluent:\n        - name: &lt;unique_name_of_this_integration&gt;\n          apiKey: &lt;your_api_key&gt;\n          apiSecret: &lt;your_api_key_secret&gt;\n</code></pre>"},{"location":"getting-started/integrations/datadog/","title":"Datadog","text":"<p>To manage Datadog costs, you need to create an API key and an Application Key for your Organization, or Parent Organization (if you have Multiple-Organization Accounts), with <code>usage_read</code> and <code>billing_read</code> permissions. You can find the documentation here. Add the following settings to <code>app-config.yaml</code>:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      datadog:\n        - name: &lt;unique_name_of_this_integration&gt;\n          apiKey: &lt;your_api_key&gt;\n          applicationKey: &lt;your_application_key&gt;\n          ddSite: &lt;your_site&gt; # e.g. https://api.datadoghq.eu\n</code></pre> <p>Datadog doesn't provide daily costs. Current daily costs are calculated by <code>monthly costs/number of days in that month</code>.</p>"},{"location":"getting-started/integrations/elastic-cloud/","title":"Elastic Cloud","text":"<p>InfraWallet supports integration with Elastic Cloud, enabling you to track and analyze your Elastic Cloud usage and costs.</p>"},{"location":"getting-started/integrations/elastic-cloud/#prerequisites","title":"Prerequisites","text":"<ul> <li>You must have access to your Elastic Cloud account.</li> <li>An Elastic Cloud API key with sufficient permissions to access billing and usage data.</li> <li>Your Elastic Cloud organization ID.</li> </ul>"},{"location":"getting-started/integrations/elastic-cloud/#configuration","title":"Configuration","text":"<p>Add your Elastic Cloud integration in your <code>app-config.yaml</code>:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      elasticcloud:\n        - name: &lt;unique_name&gt;\n          apiKey: &lt;your_elastic_cloud_api_key&gt;\n          organizationId: &lt;your_elastic_cloud_organization_id&gt;\n</code></pre>"},{"location":"getting-started/integrations/github/","title":"GitHub","text":"<p>InfraWallet supports integration with GitHub and GitHub Enterprise Cloud to help you track and analyze your GitHub-related costs, such as Actions, Packages, Copilot, and more. InfraWallet fetches cost data from the GitHub Enhanced Billing API.</p>"},{"location":"getting-started/integrations/github/#prerequisites","title":"Prerequisites","text":"<ul> <li>You must have admin access to your GitHub organization.</li> <li>A fine-grained token with Organization permissions: Administration (read)</li> </ul>"},{"location":"getting-started/integrations/github/#configuration","title":"Configuration","text":"<p>Add your GitHub integration in your <code>app-config.yaml</code>:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      github:\n        - name: &lt;unique_name_1&gt;\n          token: &lt;your_github_token_1&gt;\n          organization: &lt;your_github_org1_name&gt; # not case sensitive\n        - name: &lt;unique_name_2&gt;\n          token: &lt;your_github_token_2&gt;\n          organization: &lt;your_github_org2_name&gt; # not case sensitive\n</code></pre>"},{"location":"getting-started/integrations/google-cloud/","title":"Google Cloud","text":"<p>InfraWallet relies on GCP Big Query to fetch cost data. This means that the billing data needs to be exported to a big query dataset, and a service account needs to be created for InfraWallet. The steps of exporting billing data to Big Query can be found here. Then, visit Google Cloud Console and navigate to the <code>IAM &amp; Admin</code> section in the billing account. Click <code>Service Accounts</code>, and create a new service account. The service account needs to have <code>BigQuery Data Viewer</code> and <code>BigQuery Job User</code> roles. On the <code>Service Accounts</code> page, click the three dots (menu) in the <code>Actions</code> column for the newly created service account and select <code>Manage keys</code>. There click <code>Add key</code> -&gt; <code>Create new key</code>, and use <code>JSON</code> as the format. Download the JSON key file and keep it safe.</p> <p>After setting up the resources above, add the following configurations in <code>app-config.yaml</code>:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      gcp:\n        - name: &lt;unique_name_of_this_integration&gt;\n          keyFilePath: &lt;path_to_your_json_key_file&gt; # Supports environment variables, tilde expansion\n          projectId: &lt;GCP_project_that_your_big_query_dataset_belongs_to&gt;\n          datasetId: &lt;big_query_dataset_id&gt;\n          tableId: &lt;big_query_table_id&gt;\n</code></pre> <p>The <code>keyFilePath</code> supports multiple formats:</p> <ul> <li>Absolute paths: <code>/path/to/key.json</code></li> <li>Relative paths: <code>./path/to/key.json</code></li> <li>Home directory expansion: <code>~/path/to/key.json</code></li> <li>Environment variables: <code>$HOME/.config/gcloud/key.json</code> or <code>${HOME}/.config/gcloud/key.json</code></li> </ul> <p>InfraWallet will also check for the standard <code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable. You have these authentication options in order of precedence:</p> <ol> <li>Explicitly configured <code>keyFilePath</code> in app-config.yaml (highest priority)</li> <li><code>GOOGLE_APPLICATION_CREDENTIALS</code> environment variable</li> <li>Application Default Credentials from standard locations</li> </ol> <p>If none of these options are successful, you'll see appropriate error messages in the logs to help troubleshoot the issue.</p>"},{"location":"getting-started/integrations/mongodb-atlas/","title":"MongoDB Atlas","text":"<p>To manage MongoDB Atlas costs, you need to create an API key for your Organization with <code>Organization Billing Viewer</code> permission, you can find the documentation here. Once you have your API key details, add the following settings to <code>app-config.yaml</code>:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      mongoatlas:\n        - name: &lt;unique_name_of_this_integration&gt;\n          orgId: &lt;id_organization_mongo_atlas&gt;\n          publicKey: &lt;public_key_of_your_api_key&gt;\n          privateKey: &lt;private_key_of_your_api_key&gt;\n</code></pre>"},{"location":"getting-started/integrations/overview/","title":"Overview","text":"<p>InfraWallet's configuration schema is specified in <code>plugins/infrawallet-backend/config.d.ts</code>. To set up provider integrations, users must configure them in the <code>app-config.yaml</code> file located in the root directory.</p>"},{"location":"getting-started/integrations/overview/#autoloading-cost-data-and-saving-to-the-database","title":"Autoloading Cost Data and Saving to the Database","text":"<p>Info</p> <p>This feature is experimental and may have breaking changes in the future. We welcome your feedback!</p> <p>To optimize performance and minimize the number of API calls to cloud providers, InfraWallet includes an automatic background task that periodically fetches cost data from all configured integrations and stores it in the database (<code>cost_items_daily</code> and <code>cost_items_monthly</code> tables). By default, this autoload task runs every 8 hours.</p> <p>This mechanism acts as a backend cache: it preloads and persists cost data without any filters (such as AWS cost allocation tags). When a user query includes filters, InfraWallet will still fetch fresh data directly from the cloud provider and cache it in memory, rather than in the database.</p> <p>By default, this feature is disabled. To enable this feature, add the following configuration to your <code>app-config.yaml</code> file:</p> YAML<pre><code>backend:\n  infraWallet:\n    autoload:\n      enabled: true\n</code></pre> <p>To customize the autoload schedule or delay the initial data fetch after startup, use the following configuration:</p> YAML<pre><code>backend:\n  infraWallet:\n    autoload:\n      enabled: true\n      schedule: '0 0 * * *' # midnight\n      initialDelayMinutes: 1 # delay by 1 min\n</code></pre> <p>If you need to reset or refresh historical cost data in the plugin database, you can use the following API endpoints to clear existing data and trigger a reload:</p> Bash<pre><code># for a prod environment, you may need extra headers like an auth token, etc.\n\n# the following call removes the costs data from the database\ncurl -X POST -d '{\"granularity\": \"monthly\", \"provider\": \"AWS\"}' --header 'Content-Type: application/json' http://localhost:7007/api/infrawallet/default/delete_cost_items\n\n# the following call triggers the fetch and save cloud costs task immediately\ncurl http://localhost:7007/api/infrawallet/fetch_and_save_costs\n</code></pre>"},{"location":"getting-started/integrations/overview/#integration-filter","title":"Integration Filter","text":"<p>When integrating InfraWallet with your billing account, you have the ability to retrieve and display costs for all sub-accounts. However, if you want to limit the visibility of certain accounts, you can apply filters. Below is an example of how to configure this for AWS:</p> YAML<pre><code>backend:\n  infraWallet:\n    integrations:\n      aws:\n        - name: &lt;unique_name_of_this_integration&gt;\n          accountId: '&lt;12-digit_account_ID&gt;' # quoted as a string\n          ...\n          filters:\n            - type: include # 'include' or 'exclude'\n              attribute: account\n              pattern: &lt;regex_for_account_names&gt; # Use a valid regex pattern to specify accounts\n</code></pre> <p>Currently, only AWS and Datadog integrations support filters.</p>"}]}