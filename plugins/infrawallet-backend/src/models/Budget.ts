import { DatabaseService } from '@backstage/backend-plugin-api';

export type Budget = {
  id?: string; // UUID generated by database
  wallet_id?: string;
  provider: string;
  name: string;
  amount: number;
};

export async function getBudgets(database: DatabaseService, walletName: string): Promise<Budget[]> {
  const knex = await database.getClient();

  const budgets = await knex
    .select('budgets.*')
    .from<Budget>('budgets')
    .where('wallets.name', walletName)
    .join('wallets', 'budgets.wallet_id', '=', 'wallets.id');

  return budgets;
}

export async function getBudget(database: DatabaseService, walletName: string, provider: string): Promise<Budget[]> {
  const knex = await database.getClient();

  const budgets = await knex
    .select('budgets.*')
    .from<Budget>('budgets')
    .where('budgets.provider', provider)
    .where('wallets.name', walletName)
    .join('wallets', 'budgets.wallet_id', '=', 'wallets.id');

  return budgets;
}

export async function upsertBudget(database: DatabaseService, walletName: string, budget: Budget): Promise<boolean> {
  const knex = await database.getClient();
  const wallet = await knex.select('id').from('wallets').where('name', walletName).first();
  budget.wallet_id = wallet.id;
  const result: number[] = await knex('budgets').insert(budget).onConflict('id').merge();

  if (result[0] > 0) {
    return true;
  }

  return false;
}
